{
  "version": 3,
  "sources": ["../lib/ndarray.js", "../lib/sztest.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar resolveStr = require( '@stdlib/stats-base-ztest-alternative-resolve-str' );\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar quantile = require( '@stdlib/stats-base-dists-normal-quantile' ).factory;\nvar cdf = require( '@stdlib/stats-base-dists-normal-cdf' ).factory;\nvar smean = require( '@stdlib/stats-strided-smean' ).ndarray;\nvar sqrt = require( '@stdlib/math-base-special-sqrt' );\nvar abs = require( '@stdlib/math-base-special-abs' );\nvar Float32Array = require( '@stdlib/array-float32' );\nvar PINF = require( '@stdlib/constants-float32-pinf' );\nvar NINF = require( '@stdlib/constants-float32-ninf' );\nvar f32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float32Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a single-precision floating-point strided array using alternative indexing semantics.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-one-sample-results-float32' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest( N, alternative, alpha, mu, sigma, x, strideX, offsetX, out ) {\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar stat;\n\tvar alt;\n\tvar q;\n\n\talt = resolveStr( alternative );\n\tif (\n\t\tN <= 0 ||\n\t\tisnanf( alpha ) ||\n\t\tisnanf( mu ) ||\n\t\tisnanf( sigma ) ||\n\t\tsigma <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alt;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.sd = NaN;\n\t\treturn out;\n\t}\n\t// \"Cast\" input values to single-precision:\n\talpha = f32( alpha );\n\tmu = f32( mu );\n\tsigma = f32( sigma );\n\n\t// Compute the standard error of the mean:\n\tstderr = sigma / sqrt( N ); // note: intentionally evaluated in double-precision to avoid `N` exceeding max safe float32 integer\n\n\t// Compute the arithmetic mean of the input array:\n\txmean = smean( N, x, strideX, offsetX );\n\n\t// Compute the test statistic (i.e., the z-score, which is the distance of the sample mean from the population mean in units of standard error):\n\tstat = ( xmean - mu ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alt === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t} else if ( alt === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0-(alpha/2.0) );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alternative = alt;\n\tout.alpha = alpha;\n\tout.pValue = f32( pValue );\n\tout.statistic = f32( stat );\n\tout.ci = WORKSPACE;\n\tout.nullValue = mu;\n\tout.sd = f32( stderr );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sztest;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar stride2offset = require( '@stdlib/strided-base-stride2offset' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {(integer|string)} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-one-sample-results-float32' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest( N, alternative, alpha, mu, sigma, x, strideX, out ) {\n\treturn ndarray( N, alternative, alpha, mu, sigma, x, strideX, stride2offset( N, strideX ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sztest;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar sztest = require( './sztest.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( sztest, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = sztest;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample Z-test for a single-precision floating-point strided array.\n*\n* @module @stdlib/stats-strided-sztest\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-one-sample-results-float32' );\n* var sztest = require( '@stdlib/stats-strided-sztest' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Results = require( '@stdlib/stats-base-ztest-one-sample-results-float32' );\n* var sztest = require( '@stdlib/stats-strided-sztest' );\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest.ndarray( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar sztest;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsztest = main;\n} else {\n\tsztest = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sztest;\n\n// exports: { \"ndarray\": \"sztest.ndarray\" }\n"],
  "mappings": "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",
  "names": ["require_ndarray", "__commonJSMin", "exports", "module", "resolveStr", "isnanf", "quantile", "cdf", "smean", "sqrt", "abs", "Float32Array", "PINF", "NINF", "f32", "normalCDF", "normalQuantile", "WORKSPACE", "sztest", "N", "alternative", "alpha", "mu", "sigma", "x", "strideX", "offsetX", "out", "pValue", "stderr", "xmean", "stat", "alt", "q", "require_sztest", "__commonJSMin", "exports", "module", "stride2offset", "ndarray", "sztest", "N", "alternative", "alpha", "mu", "sigma", "x", "strideX", "out", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "sztest", "ndarray", "join", "tryRequire", "isError", "main", "sztest", "tmp"]
}
