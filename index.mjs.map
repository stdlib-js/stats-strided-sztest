{"version":3,"file":"index.mjs","sources":["../lib/ndarray.js","../lib/sztest.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isnanf from '@stdlib/math-base-assert-is-nanf';\nimport { factory as quantile } from '@stdlib/stats-base-dists-normal-quantile';\nimport { factory as cdf } from '@stdlib/stats-base-dists-normal-cdf';\nimport { ndarray as smean } from '@stdlib/stats-strided-smean';\nimport sqrt from '@stdlib/math-base-special-sqrt';\nimport abs from '@stdlib/math-base-special-abs';\nimport Float32Array from '@stdlib/array-float32';\nimport PINF from '@stdlib/constants-float32-pinf';\nimport NINF from '@stdlib/constants-float32-ninf';\nimport f32 from '@stdlib/number-float64-base-to-float32';\n\n\n// VARIABLES //\n\nvar normalCDF = cdf( 0.0, 1.0 );\nvar normalQuantile = quantile( 0.0, 1.0 );\n\n// Initialize a workspace for storing confidence intervals:\nvar WORKSPACE = new Float32Array( 2 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a single-precision floating-point strided array using alternative indexing semantics.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {string} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, 0, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest( N, alternative, alpha, mu, sigma, x, strideX, offsetX, out ) {\n\tvar pValue;\n\tvar stderr;\n\tvar xmean;\n\tvar stat;\n\tvar q;\n\n\tif (\n\t\tN <= 0 ||\n\t\tisnanf( alpha ) ||\n\t\tisnanf( mu ) ||\n\t\tisnanf( sigma ) ||\n\t\tsigma <= 0.0 ||\n\t\talpha < 0.0 ||\n\t\talpha > 1.0\n\t) {\n\t\tWORKSPACE[ 0 ] = NaN;\n\t\tWORKSPACE[ 1 ] = NaN;\n\t\tout.rejected = false;\n\t\tout.alternative = alternative;\n\t\tout.alpha = NaN;\n\t\tout.pValue = NaN;\n\t\tout.statistic = NaN;\n\t\tout.ci = WORKSPACE;\n\t\tout.nullValue = NaN;\n\t\tout.sd = NaN;\n\t\treturn out;\n\t}\n\t// \"Cast\" input values to single-precision:\n\talpha = f32( alpha );\n\tmu = f32( mu );\n\tsigma = f32( sigma );\n\n\t// Compute the standard error of the mean:\n\tstderr = sigma / sqrt( N ); // note: intentionally evaluated in double-precision to avoid `N` exceeding max safe float32 integer\n\n\t// Compute the arithmetic mean of the input array:\n\txmean = smean( N, x, strideX, offsetX );\n\n\t// Compute the test statistic (i.e., the z-score, which is the distance of the sample mean from the population mean in units of standard error):\n\tstat = ( xmean - mu ) / stderr;\n\n\t// Compute the p-value and confidence interval...\n\tif ( alternative === 'less' ) {\n\t\tpValue = normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = NINF;\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t} else if ( alternative === 'greater' ) {\n\t\tpValue = 1.0 - normalCDF( stat );\n\t\tq = normalQuantile( 1.0-alpha );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = PINF;\n\t} else { // alt == 'two-sided'\n\t\tpValue = 2.0 * normalCDF( -abs( stat ) );\n\t\tq = normalQuantile( 1.0-(alpha/2.0) );\n\t\tWORKSPACE[ 0 ] = mu + ( (stat-q)*stderr );\n\t\tWORKSPACE[ 1 ] = mu + ( (stat+q)*stderr );\n\t}\n\t// Return test results:\n\tout.rejected = ( pValue <= alpha );\n\tout.alternative = alternative;\n\tout.alpha = alpha;\n\tout.pValue = f32( pValue );\n\tout.statistic = f32( stat );\n\tout.ci = WORKSPACE;\n\tout.nullValue = mu;\n\tout.sd = f32( stderr );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes a one-sample Z-test for a single-precision floating-point strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {string} alternative - alternative hypothesis\n* @param {number} alpha - significance level\n* @param {number} mu - mean under the null hypothesis\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Float32Array} x - input array\n* @param {integer} strideX - stride length\n* @param {Object} out - output results object\n* @returns {Object} results object\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import Results from '@stdlib/stats-base-ztest-one-sample-results-float32';\n*\n* var x = new Float32Array( [ 4.0, 4.0, 6.0, 6.0, 5.0 ] );\n*\n* var results = new Results();\n* var out = sztest( x.length, 'two-sided', 0.05, 0.0, 1.0, x, 1, results );\n* // returns {...}\n*\n* var bool = ( out === results );\n* // returns true\n*/\nfunction sztest( N, alternative, alpha, mu, sigma, x, strideX, out ) {\n\treturn ndarray( N, alternative, alpha, mu, sigma, x, strideX, stride2offset( N, strideX ), out ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sztest from './sztest.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sztest, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sztest;\n"],"names":["normalCDF","cdf","normalQuantile","quantile","WORKSPACE","Float32Array","sztest","N","alternative","alpha","mu","sigma","x","strideX","offsetX","out","pValue","stderr","stat","q","isnanf","NaN","rejected","statistic","ci","nullValue","sd","f32","sqrt","smean","NINF","PINF","abs","ndarray","stride2offset","setReadOnly"],"mappings":";;6sCAoCA,IAAIA,EAAYC,EAAK,EAAK,GACtBC,EAAiBC,EAAU,EAAK,GAGhCC,EAAY,IAAIC,EAAc,GAgClC,SAASC,EAAQC,EAAGC,EAAaC,EAAOC,EAAIC,EAAOC,EAAGC,EAASC,EAASC,GACvE,IAAIC,EACAC,EAEAC,EACAC,EAEJ,OACCZ,GAAK,GACLa,EAAQX,IACRW,EAAQV,IACRU,EAAQT,IACRA,GAAS,GACTF,EAAQ,GACRA,EAAQ,GAERL,EAAW,GAAMiB,IACjBjB,EAAW,GAAMiB,IACjBN,EAAIO,UAAW,EACfP,EAAIP,YAAcA,EAClBO,EAAIN,MAAQY,IACZN,EAAIC,OAASK,IACbN,EAAIQ,UAAYF,IAChBN,EAAIS,GAAKpB,EACTW,EAAIU,UAAYJ,IAChBN,EAAIW,GAAKL,IACFN,IAGRN,EAAQkB,EAAKlB,GACbC,EAAKiB,EAAKjB,GAIVO,GAHAN,EAAQgB,EAAKhB,IAGIiB,EAAMrB,GAMvBW,GAHQW,EAAOtB,EAAGK,EAAGC,EAASC,GAGbJ,GAAOO,EAGH,SAAhBT,GACJQ,EAAShB,EAAWkB,GACpBC,EAAIjB,EAAgB,EAAIO,GACxBL,EAAW,GAAM0B,EACjB1B,EAAW,GAAMM,GAAQQ,EAAKC,GAAGF,GACN,YAAhBT,GACXQ,EAAS,EAAMhB,EAAWkB,GAC1BC,EAAIjB,EAAgB,EAAIO,GACxBL,EAAW,GAAMM,GAAQQ,EAAKC,GAAGF,EACjCb,EAAW,GAAM2B,IAEjBf,EAAS,EAAMhB,GAAYgC,EAAKd,IAChCC,EAAIjB,EAAgB,EAAKO,EAAM,GAC/BL,EAAW,GAAMM,GAAQQ,EAAKC,GAAGF,EACjCb,EAAW,GAAMM,GAAQQ,EAAKC,GAAGF,GAGlCF,EAAIO,SAAaN,GAAUP,EAC3BM,EAAIP,YAAcA,EAClBO,EAAIN,MAAQA,EACZM,EAAIC,OAASW,EAAKX,GAClBD,EAAIQ,UAAYI,EAAKT,GACrBH,EAAIS,GAAKpB,EACTW,EAAIU,UAAYf,EAChBK,EAAIW,GAAKC,EAAKV,GACPF,EACR,CCvFA,SAAST,EAAQC,EAAGC,EAAaC,EAAOC,EAAIC,EAAOC,EAAGC,EAASE,GAC9D,OAAOkB,EAAS1B,EAAGC,EAAaC,EAAOC,EAAIC,EAAOC,EAAGC,EAASqB,EAAe3B,EAAGM,GAAWE,EAC5F,CC3BAoB,EAAA7B,EAAA,UAAA2B"}